"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPlainObject = exports.removeKey = exports.addKeyValue = exports.deserializeRecord = exports.serializeValue = exports.referenceArg = exports.decodeBase64 = exports.encodeBase64 = exports.getCollectionShortNameFromId = exports.getCollectionProperties = exports.getCollectionASTFromName = exports.getCollectionASTFromId = void 0;
var Record_1 = require("./Record");
function getCollectionASTFromId(id, ast) {
    return getCollectionASTFromName(getCollectionShortNameFromId(id), ast);
}
exports.getCollectionASTFromId = getCollectionASTFromId;
function getCollectionASTFromName(name, ast) {
    var collections = ast.filter(function (n) { return n.kind === 'collection'; });
    return collections.find(function (n) { return n.name === name; });
}
exports.getCollectionASTFromName = getCollectionASTFromName;
function getCollectionProperties(collection) {
    return collection.attributes.filter(function (a) { return a.kind === 'property'; });
}
exports.getCollectionProperties = getCollectionProperties;
function getCollectionShortNameFromId(id) {
    var name = id.split('/').pop();
    if (!name)
        throw new Error("Invalid collection id: ".concat(id));
    return name;
}
exports.getCollectionShortNameFromId = getCollectionShortNameFromId;
function encodeBase64(value) {
    return btoa(String.fromCharCode.apply(null, value));
}
exports.encodeBase64 = encodeBase64;
function decodeBase64(value) {
    var binaryString = atob(value);
    var bytes = new Uint8Array(binaryString.length);
    for (var i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
}
exports.decodeBase64 = decodeBase64;
function referenceArg(arg) {
    if (arg instanceof Record_1.CollectionRecord)
        return arg.reference();
    if (Array.isArray(arg)) {
        for (var i in arg) {
            arg[i] = referenceArg(arg[i]);
        }
    }
    return arg;
}
exports.referenceArg = referenceArg;
function serializeValue(arg) {
    if (arg instanceof Uint8Array)
        return encodeBase64(arg);
    arg = referenceArg(arg);
    return arg;
}
exports.serializeValue = serializeValue;
function deserializeRecord(data, properties) {
    if (!data)
        return;
    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
        var property = properties_1[_i];
        switch (property.type.kind) {
            case 'primitive':
                switch (property.type.value) {
                    case 'bytes':
                        if (property.name in data) {
                            data[property.name] = decodeBase64(data[property.name]);
                        }
                }
                break;
            case 'object':
                deserializeRecord(data[property.name], property.type.fields);
                break;
        }
    }
}
exports.deserializeRecord = deserializeRecord;
// Adds a key/value to a record, or creates an object with the key/value
function addKeyValue(key, value, obj) {
    var o = obj !== null && obj !== void 0 ? obj : {};
    o[key] = value;
    return o;
}
exports.addKeyValue = addKeyValue;
// Removes given keys from the object
function removeKey(key, obj) {
    if (!obj || !isPlainObject(obj))
        return {};
    for (var _i = 0, key_1 = key; _i < key_1.length; _i++) {
        var k = key_1[_i];
        if (k in obj) {
            delete obj[k];
        }
    }
    return obj;
}
exports.removeKey = removeKey;
// Returns true if the object is a plain object
function isPlainObject(val) {
    return typeof val === 'object' && val.constructor === Object;
}
exports.isPlainObject = isPlainObject;
//# sourceMappingURL=util.js.map