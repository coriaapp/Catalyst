"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Doc = exports.CollectionRecordResponse = exports.CollectionRecord = void 0;
var errors_1 = require("./errors");
var util_1 = require("./util");
var CollectionRecord = /** @class */ (function () {
    function CollectionRecord(id, collection, client, onSnapshotRegister) {
        var _this = this;
        this.call = function (functionName, args) {
            if (args === void 0) { args = []; }
            return __awaiter(_this, void 0, void 0, function () {
                var ast, isCallPubliclyAccessible, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.collection.getAST()];
                        case 1:
                            ast = _a.sent();
                            return [4 /*yield*/, this.collection.isCallPubliclyAccessible(functionName)];
                        case 2:
                            isCallPubliclyAccessible = _a.sent();
                            return [4 /*yield*/, this.client.request({
                                    url: "/collections/".concat(encodeURIComponent(this.collection.id), "/records/").concat(encodeURIComponent(this.id), "/call/").concat(encodeURIComponent(functionName)),
                                    method: 'POST',
                                    data: {
                                        args: args.map(util_1.serializeValue),
                                    },
                                }).send(isCallPubliclyAccessible ? 'optional' : 'required')];
                        case 3:
                            res = _a.sent();
                            return [2 /*return*/, new CollectionRecordResponse(this.id, res.data, ast, this.collection, this.client, this.onSnapshotRegister)];
                    }
                });
            });
        };
        this.get = function () { return __awaiter(_this, void 0, void 0, function () {
            var ast, isReadPubliclyAccessible, sixtyMinutes, res, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.collection.getAST()];
                    case 1:
                        ast = _a.sent();
                        return [4 /*yield*/, this.collection.isReadPubliclyAccessible()];
                    case 2:
                        isReadPubliclyAccessible = _a.sent();
                        sixtyMinutes = 60 * 60 * 1000;
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.client.request(this.request())
                                .send(isReadPubliclyAccessible ? 'none' : 'required', sixtyMinutes)];
                    case 4:
                        res = _a.sent();
                        return [2 /*return*/, new CollectionRecordResponse(this.id, res.data, ast, this.collection, this.client, this.onSnapshotRegister)];
                    case 5:
                        err_1 = _a.sent();
                        if (err_1 instanceof errors_1.PolybaseError && err_1.reason === 'record/not-found') {
                            return [2 /*return*/, new CollectionRecordResponse(this.id, { data: null, block: null }, ast, this.collection, this.client, this.onSnapshotRegister)];
                        }
                        throw err_1;
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        this.reference = function () { return ({
            collectionId: _this.collection.id,
            id: _this.id,
        }); };
        this.key = function () {
            return "record:".concat(_this.collection.id, "/").concat(_this.id);
        };
        this.onSnapshot = function (fn, errFn) {
            return _this.onSnapshotRegister(_this, fn, errFn);
        };
        this.request = function () { return ({
            url: "/collections/".concat(encodeURIComponent(_this.collection.id), "/records/").concat(encodeURIComponent(_this.id)),
            method: 'GET',
        }); };
        this.id = id;
        this.collection = collection;
        this.client = client;
        this.onSnapshotRegister = onSnapshotRegister;
    }
    return CollectionRecord;
}());
exports.CollectionRecord = CollectionRecord;
var CollectionRecordResponse = /** @class */ (function (_super) {
    __extends(CollectionRecordResponse, _super);
    function CollectionRecordResponse(id, response, ast, collection, client, onSnapshotRegister) {
        var _this = _super.call(this, id, collection, client, onSnapshotRegister) || this;
        _this.exists = function () {
            return _this.data !== null;
        };
        _this.toJSON = function () {
            return {
                data: _this.data,
                block: _this.block,
            };
        };
        var data = response.data, block = response.block;
        (0, util_1.deserializeRecord)(data, (0, util_1.getCollectionProperties)(ast));
        _this.data = data;
        _this.block = block;
        return _this;
    }
    return CollectionRecordResponse;
}(CollectionRecord));
exports.CollectionRecordResponse = CollectionRecordResponse;
/**
 * @deprecated use CollectionRecord
 */
exports.Doc = CollectionRecord;
//# sourceMappingURL=Record.js.map