import type { CallArg } from './types';
import { Root as AST, Property as ASTProperty, Collection as ASTCollection, ObjectField } from '@polybase/polylang/dist/ast';
export declare function getCollectionASTFromId(id: string, ast: AST): ASTCollection | undefined;
export declare function getCollectionASTFromName(name: string, ast: AST): ASTCollection | undefined;
export declare function getCollectionProperties(collection: ASTCollection): ASTProperty[];
export declare function getCollectionShortNameFromId(id: string): string;
export declare function encodeBase64(value: Uint8Array): string;
export declare function decodeBase64(value: string): Uint8Array;
export declare function referenceArg(arg: CallArg): CallArg;
export declare function serializeValue(arg: CallArg): CallArg;
export declare function deserializeRecord(data: Record<string, any>, properties: (ASTProperty | ObjectField)[]): void;
export declare function addKeyValue(key: string, value: any, obj?: Record<string, any>): Record<string, any>;
export declare function removeKey(key: string, obj?: any): Record<string, any>;
export declare function isPlainObject(val: any): val is Record<string, any>;
//# sourceMappingURL=util.d.ts.map