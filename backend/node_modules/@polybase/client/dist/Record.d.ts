import { Collection } from './Collection';
import { SubscriptionErrorFn, SubscriptionFn } from './Subscription';
import { CollectionRecordSnapshotRegister, Request, CallArgs, SenderRawRecordResponse, Block } from './types';
import { Client } from './Client';
import { Collection as ASTCollection } from '@polybase/polylang/dist/ast';
export type CollectionRecordReference = {
    collectionId: string;
    id: string;
};
export declare class CollectionRecord<T> {
    id: string;
    private collection;
    private client;
    private onSnapshotRegister;
    constructor(id: string, collection: Collection<T>, client: Client, onSnapshotRegister: CollectionRecordSnapshotRegister<T>);
    call: (functionName: string, args?: CallArgs) => Promise<CollectionRecordResponse<T, T | null>>;
    get: () => Promise<CollectionRecordResponse<T, T | null>>;
    reference: () => CollectionRecordReference;
    key: () => string;
    onSnapshot: (fn: SubscriptionFn<CollectionRecordResponse<T>>, errFn?: SubscriptionErrorFn) => () => void;
    request: () => Request;
}
export declare class CollectionRecordResponse<T, NT extends T | null = T> extends CollectionRecord<T> {
    data: NT;
    block: Block;
    constructor(id: string, response: SenderRawRecordResponse, ast: ASTCollection, collection: Collection<T>, client: Client, onSnapshotRegister: CollectionRecordSnapshotRegister<T>);
    exists: () => this is CollectionRecordResponse<NonNullable<T>, NonNullable<T>>;
    toJSON: () => {
        data: NT;
        block: Block;
    };
}
/**
 * @deprecated use CollectionRecord
 */
export declare const Doc: typeof CollectionRecord;
//# sourceMappingURL=Record.d.ts.map