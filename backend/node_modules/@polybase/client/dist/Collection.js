"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
var Record_1 = require("./Record");
var Query_1 = require("./Query");
var Subscription_1 = require("./Subscription");
var validator_1 = require("@polybase/polylang/dist/validator");
var util_1 = require("./util");
var errors_1 = require("./errors");
var Collection = /** @class */ (function () {
    function Collection(id, client) {
        var _this = this;
        this.querySubs = {};
        this.recordSubs = {};
        /**
         * @deprecated You do not need to call load()
         */
        this.load = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        }); };
        this.getMeta = function () { return __awaiter(_this, void 0, void 0, function () {
            var col, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.meta)
                            return [2 /*return*/, this.meta
                                // Manually get Collection meta, otherwise we would recursively call this function
                            ];
                        col = new Collection('Collection', this.client);
                        return [4 /*yield*/, this.client.request(col.record(this.id).request())
                                .send('none')];
                    case 1:
                        res = _a.sent();
                        if (!res.data.data) {
                            throw new errors_1.PolybaseError('collection/not-found', {
                                message: "Collection ".concat(this.id, " does not exist"),
                            });
                        }
                        this.meta = res.data.data;
                        return [2 /*return*/, this.meta];
                }
            });
        }); };
        this.getAST = function () { return __awaiter(_this, void 0, void 0, function () {
            var meta, ast, collectionAST;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Return cached value if it exists
                        if (this.astCache)
                            return [2 /*return*/, this.astCache];
                        return [4 /*yield*/, this.getMeta()];
                    case 1:
                        meta = _a.sent();
                        ast = JSON.parse(meta.ast);
                        collectionAST = (0, util_1.getCollectionASTFromId)(this.id, ast);
                        if (!collectionAST)
                            throw (0, errors_1.createError)('collection/invalid-ast');
                        this.astCache = collectionAST;
                        return [2 /*return*/, collectionAST];
                }
            });
        }); };
        this.validate = function (data) { return __awaiter(_this, void 0, void 0, function () {
            var ast, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getAST()];
                    case 1:
                        ast = _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, (0, validator_1.validateSet)(ast, data)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 4:
                        _a = _b.sent();
                        return [2 /*return*/, false];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        this.isReadPubliclyAccessible = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Without this, we would recursively call this function
                if (this.id === 'Collection')
                    return [2 /*return*/, true];
                return [2 /*return*/, this.isCollectionPubliclyAccessible('read')];
            });
        }); };
        this.isCallPubliclyAccessible = function (methodName) { return __awaiter(_this, void 0, void 0, function () {
            var colAST, methodAST, methodDirectives;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Without this, we would recursively call this function
                        if (this.id === 'Collection')
                            return [2 /*return*/, true];
                        return [4 /*yield*/, this.getAST()
                            // Find the method in the AST
                        ];
                    case 1:
                        colAST = _a.sent();
                        methodAST = colAST.attributes.find(function (attr) { return attr.kind === 'method' && attr.name === methodName; });
                        if (!methodAST)
                            throw (0, errors_1.createError)('function/not-found');
                        methodDirectives = methodAST === null || methodAST === void 0 ? void 0 : methodAST.attributes.filter(function (attr) { return attr.kind === 'directive' && attr.name === 'call'; });
                        // Method has @call directives with arguments/restrictions
                        if (methodDirectives.some(function (attr) { return attr.arguments.length > 0; }))
                            return [2 /*return*/, false
                                // Method has @call any
                            ];
                        // Method has @call any
                        else if (methodDirectives.length > 0)
                            return [2 /*return*/, true
                                // Otherwise check the root of the collection
                            ];
                        // Otherwise check the root of the collection
                        return [2 /*return*/, this.isCollectionPubliclyAccessible('call')];
                }
            });
        }); };
        this.isCollectionPubliclyAccessible = function (type) { return __awaiter(_this, void 0, void 0, function () {
            var colAST, hasPublicDirective, hasTypeDirective;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAST()];
                    case 1:
                        colAST = _a.sent();
                        hasPublicDirective = colAST.attributes.some(function (attr) { return attr.kind === 'directive' && attr.name === 'public'; });
                        hasTypeDirective = colAST.attributes.some(function (attr) { var _a; return attr.kind === 'directive' && attr.name === type && ((_a = attr.arguments) === null || _a === void 0 ? void 0 : _a.length) === 0; });
                        return [2 /*return*/, hasPublicDirective || hasTypeDirective];
                }
            });
        }); };
        this.create = function (args) {
            if (args === void 0) { args = []; }
            return __awaiter(_this, void 0, void 0, function () {
                var _a, res, ast, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            if (!Array.isArray(args)) {
                                throw new TypeError('invalid argument: `args` must be an array');
                            }
                            _c = (_b = Promise).all;
                            _d = [this.client.request({
                                    url: "/collections/".concat(encodeURIComponent(this.id), "/records"),
                                    method: 'POST',
                                    data: {
                                        args: args.map(util_1.serializeValue),
                                    },
                                }).send('optional')];
                            return [4 /*yield*/, this.getAST()];
                        case 1: return [4 /*yield*/, _c.apply(_b, [_d.concat([
                                    _e.sent()
                                ])])];
                        case 2:
                            _a = _e.sent(), res = _a[0], ast = _a[1];
                            return [2 /*return*/, new Record_1.CollectionRecordResponse(this.id, res.data, ast, this, this.client, this.onRecordSnapshotRegister)];
                    }
                });
            });
        };
        this.get = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createQuery().get()];
            });
        }); };
        this.record = function (id) {
            return new Record_1.CollectionRecord(id, _this, _this.client, _this.onRecordSnapshotRegister);
        };
        /**
         * @deprecated use .record(id: string)
         */
        this.doc = function (id) {
            return _this.record(id);
        };
        this.where = function (field, op, value) {
            return _this.createQuery().where(field, op, value);
        };
        this.sort = function (field, direction) {
            return _this.createQuery().sort(field, direction);
        };
        this.limit = function (limit) {
            return _this.createQuery().limit(limit);
        };
        this.onSnapshot = function (fn, errFn) {
            return _this.createQuery().onSnapshot(fn, errFn);
        };
        this.after = function (cursor) {
            return _this.createQuery().after(cursor);
        };
        this.before = function (cursor) {
            return _this.createQuery().before(cursor);
        };
        this.key = function () {
            return "collection:".concat(_this.id);
        };
        this.onQuerySnapshotRegister = function (q, fn, errFn) {
            var k = q.key();
            if (!_this.querySubs[k]) {
                _this.querySubs[k] = new Subscription_1.Subscription(q.request(), _this.client, _this.isReadPubliclyAccessible(), function (res) { return __awaiter(_this, void 0, void 0, function () {
                    var ast;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.getAST()];
                            case 1:
                                ast = _a.sent();
                                return [2 /*return*/, new Query_1.QueryResponse(this, this.client, this.onQuerySnapshotRegister, this.onRecordSnapshotRegister, res.data, ast)];
                        }
                    });
                }); });
            }
            return _this.querySubs[k].subscribe(fn, errFn);
        };
        this.onRecordSnapshotRegister = function (d, fn, errFn) {
            var k = d.key();
            if (!_this.recordSubs[k]) {
                _this.recordSubs[k] = new Subscription_1.Subscription(d.request(), _this.client, _this.isReadPubliclyAccessible(), function (res) { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _a = Record_1.CollectionRecordResponse.bind;
                                _b = [void 0, this.id, res.data];
                                return [4 /*yield*/, this.getAST()];
                            case 1: return [2 /*return*/, new (_a.apply(Record_1.CollectionRecordResponse, _b.concat([_c.sent(), this, this.client, this.onRecordSnapshotRegister])))()];
                        }
                    });
                }); });
            }
            return _this.recordSubs[k].subscribe(fn, errFn);
        };
        this.id = id;
        this.client = client;
    }
    Collection.prototype.name = function () {
        return (0, util_1.getCollectionShortNameFromId)(this.id);
    };
    Collection.prototype.createQuery = function () {
        return new Query_1.Query(this, this.client, this.onQuerySnapshotRegister, this.onRecordSnapshotRegister);
    };
    return Collection;
}());
exports.Collection = Collection;
//# sourceMappingURL=Collection.js.map