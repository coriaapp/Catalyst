"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.symmetricDecryptFromEncoding = exports.symmetricEncryptToEncoding = exports.importKey = exports.symmetricDecrypt = exports.symmetricEncrypt = exports.generateSecretKey = void 0;
var crypto_1 = require("../crypto");
var randombytes_1 = require("../randombytes");
var util_1 = require("../util");
var SYMM_KEY_ALGO_PARAMS = {
    name: 'AES-CBC',
    length: 256,
};
/**
 * Generate a symmetric encryption key
 *
 * @returns secret key
 */
function generateSecretKey() {
    return (0, randombytes_1.randomBytes)(32);
}
exports.generateSecretKey = generateSecretKey;
/**
 * Symetric encrypt data
 *
 * @returns encrypted data
 */
function symmetricEncrypt(symmKey, data) {
    return __awaiter(this, void 0, void 0, function () {
        var key, iv, encrypted;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, importKey(symmKey)];
                case 1:
                    key = _a.sent();
                    iv = crypto_1.crypto.getRandomValues(new Uint8Array(16));
                    return [4 /*yield*/, crypto_1.crypto.subtle.encrypt({ name: SYMM_KEY_ALGO_PARAMS.name, iv: iv }, key, data)];
                case 2:
                    encrypted = _a.sent();
                    return [2 /*return*/, {
                            version: 'aes-cbc-256/symmetric',
                            nonce: iv,
                            ciphertext: new Uint8Array(encrypted),
                        }];
            }
        });
    });
}
exports.symmetricEncrypt = symmetricEncrypt;
/**
 * Decrypt data, encrypted with symmetricEncrypt()
 *
 * @returns decrypted data
 */
function symmetricDecrypt(symmKey, encryptedData) {
    return __awaiter(this, void 0, void 0, function () {
        var key, decryptedZip;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, importKey(symmKey)];
                case 1:
                    key = _a.sent();
                    return [4 /*yield*/, crypto_1.crypto.subtle.decrypt({
                            name: SYMM_KEY_ALGO_PARAMS.name,
                            iv: encryptedData.nonce,
                        }, key, encryptedData.ciphertext)];
                case 2:
                    decryptedZip = _a.sent();
                    return [2 /*return*/, new Uint8Array(decryptedZip)];
            }
        });
    });
}
exports.symmetricDecrypt = symmetricDecrypt;
/**
 * Import a key
 *
 * @returns CryptoKey interface of the Web Crypto API: https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey
 */
function importKey(symmKey) {
    return __awaiter(this, void 0, void 0, function () {
        var importedSymmKey;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, crypto_1.crypto.subtle.importKey('raw', symmKey, SYMM_KEY_ALGO_PARAMS, true, ['encrypt', 'decrypt'])];
                case 1:
                    importedSymmKey = _a.sent();
                    return [2 /*return*/, importedSymmKey];
            }
        });
    });
}
exports.importKey = importKey;
/**
 * Symmetric encrypt string data as a given encoding (hex/base64). Defaults to base64.
 *
 * @returns encrypted data as encoding
 */
function symmetricEncryptToEncoding(publicKey, data, encoding) {
    if (encoding === void 0) { encoding = 'base64'; }
    return __awaiter(this, void 0, void 0, function () {
        var e;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, symmetricEncrypt(publicKey, (0, util_1.decodeFromString)(data, 'utf8'))];
                case 1:
                    e = _a.sent();
                    return [2 /*return*/, (0, util_1.stringifyEncryptedData)(e, encoding)];
            }
        });
    });
}
exports.symmetricEncryptToEncoding = symmetricEncryptToEncoding;
/**
 * Symmetric decrypt data from given encoding (hex/base64). Defaults to base64.
 *
 * @returns decrypted string
 */
function symmetricDecryptFromEncoding(privateKey, hex, encoding) {
    if (encoding === void 0) { encoding = 'base64'; }
    return __awaiter(this, void 0, void 0, function () {
        var e, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    e = (0, util_1.parseEncrypedData)(hex, encoding);
                    return [4 /*yield*/, symmetricDecrypt(privateKey, e)];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, (0, util_1.encodeToString)(res, 'utf8')];
            }
        });
    });
}
exports.symmetricDecryptFromEncoding = symmetricDecryptFromEncoding;
//# sourceMappingURL=aes-cbc.js.map