import { BytesLike } from '@ethersproject/bytes';
import { EncryptedDataSecp256k1 } from '../types';
export { recoverPublicKey } from '@ethersproject/signing-key';
/**
 * Generate private key
 *
 * @returns public/private key pair
 */
export declare function generatePrivateKey(): Uint8Array;
/**
 * Generate public/private key pairs
 *
 * @returns public/private key pair
 */
export declare function generateKeyPair(): Promise<{
    version: string;
    privateKey: Uint8Array;
    publicKey: Uint8Array;
}>;
/**
 * Generate 65-byte uncompressed public key from private key
 *
 * @returns public key
 */
export declare function getPublicKey(privateKey: Uint8Array): Uint8Array;
/**
 * Generate 65-byte uncompressed public key from private key
 *
 * @returns public key
 */
export declare function getPublicCompressed(privateKey: Uint8Array): Uint8Array;
export declare function compressPublicKey(publicKey: Uint8Array): Uint8Array;
/**
 * Derive shared key
 *
 * @returns shared key
 */
export declare function derive(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Promise<Uint8Array>;
/**
 * Asymmetric encrypt bytes
 *
 * @returns encrypted data
 */
export declare function asymmetricEncrypt(publicKey: Uint8Array, data: Uint8Array): Promise<EncryptedDataSecp256k1>;
/**
 * Asymmetric decrypt bytes
 *
 * @returns decrypted bytes
 */
export declare function asymmetricDecrypt(privateKey: Uint8Array, data: EncryptedDataSecp256k1): Promise<Uint8Array>;
/**
 * Sign bytes
 */
export declare function sign(privateKey: BytesLike, d: BytesLike): string;
/**
 * Asymmetric encrypt string data as a given encoding (hex/base64). Defaults to base64.
 *
 * @returns encrypted data as hex
 */
export declare function asymmetricEncryptToEncoding(publicKey: Uint8Array, data: string, encoding?: 'base64' | 'hex'): Promise<string>;
/**
 * Asymmetric decrypt data from given encoding (hex/base64). Defaults to base64.
 *
 * @returns decrypted string
 */
export declare function asymmetricDecryptFromEncoding(privateKey: Uint8Array, hex: string, encoding?: 'base64' | 'hex'): Promise<string>;
//# sourceMappingURL=secp256k1.d.ts.map