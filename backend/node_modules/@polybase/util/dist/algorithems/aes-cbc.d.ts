import { EncryptedDataAesCbc256 } from '../types';
/**
 * Generate a symmetric encryption key
 *
 * @returns secret key
 */
export declare function generateSecretKey(): Uint8Array;
/**
 * Symetric encrypt data
 *
 * @returns encrypted data
 */
export declare function symmetricEncrypt(symmKey: Uint8Array, data: Uint8Array): Promise<EncryptedDataAesCbc256>;
/**
 * Decrypt data, encrypted with symmetricEncrypt()
 *
 * @returns decrypted data
 */
export declare function symmetricDecrypt(symmKey: Uint8Array, encryptedData: EncryptedDataAesCbc256): Promise<Uint8Array>;
/**
 * Import a key
 *
 * @returns CryptoKey interface of the Web Crypto API: https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey
 */
export declare function importKey(symmKey: Uint8Array): Promise<CryptoKey>;
/**
 * Symmetric encrypt string data as a given encoding (hex/base64). Defaults to base64.
 *
 * @returns encrypted data as encoding
 */
export declare function symmetricEncryptToEncoding(publicKey: Uint8Array, data: string, encoding?: 'base64' | 'hex'): Promise<string>;
/**
 * Symmetric decrypt data from given encoding (hex/base64). Defaults to base64.
 *
 * @returns decrypted string
 */
export declare function symmetricDecryptFromEncoding(privateKey: Uint8Array, hex: string, encoding?: 'base64' | 'hex'): Promise<string>;
//# sourceMappingURL=aes-cbc.d.ts.map