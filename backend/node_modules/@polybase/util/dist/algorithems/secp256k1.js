"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asymmetricDecryptFromEncoding = exports.asymmetricEncryptToEncoding = exports.sign = exports.asymmetricDecrypt = exports.asymmetricEncrypt = exports.derive = exports.compressPublicKey = exports.getPublicCompressed = exports.getPublicKey = exports.generateKeyPair = exports.generatePrivateKey = exports.recoverPublicKey = void 0;
var secp256k1_1 = __importDefault(require("secp256k1"));
var elliptic_1 = __importDefault(require("elliptic"));
var bytes_1 = require("@ethersproject/bytes");
var signing_key_1 = require("@ethersproject/signing-key");
var randombytes_1 = require("../randombytes");
var util_1 = require("../util");
var crypto_1 = require("../crypto");
var signing_key_2 = require("@ethersproject/signing-key");
Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function () { return signing_key_2.recoverPublicKey; } });
var EC = elliptic_1.default.ec;
var ec = new EC('secp256k1');
/**
 * Generate private key
 *
 * @returns public/private key pair
 */
function generatePrivateKey() {
    return (0, randombytes_1.randomBytes)(32);
}
exports.generatePrivateKey = generatePrivateKey;
/**
 * Generate public/private key pairs
 *
 * @returns public/private key pair
 */
function generateKeyPair() {
    return __awaiter(this, void 0, void 0, function () {
        var privateKey;
        return __generator(this, function (_a) {
            privateKey = generatePrivateKey();
            return [2 /*return*/, {
                    version: 'secp256k1/asymmetric',
                    privateKey: privateKey,
                    publicKey: secp256k1_1.default.publicKeyCreate(privateKey),
                }];
        });
    });
}
exports.generateKeyPair = generateKeyPair;
/**
 * Generate 65-byte uncompressed public key from private key
 *
 * @returns public key
 */
function getPublicKey(privateKey) {
    return secp256k1_1.default.publicKeyCreate(privateKey, false);
}
exports.getPublicKey = getPublicKey;
/**
 * Generate 65-byte uncompressed public key from private key
 *
 * @returns public key
 */
function getPublicCompressed(privateKey) {
    return secp256k1_1.default.publicKeyCreate(privateKey, true);
}
exports.getPublicCompressed = getPublicCompressed;
function compressPublicKey(publicKey) {
    if (publicKey.byteLength === 65)
        return secp256k1_1.default.publicKeyConvert(publicKey, true);
    if (publicKey.byteLength === 64)
        return secp256k1_1.default.publicKeyConvert((0, util_1.addPublicKeyPrefix)(publicKey), true);
    return publicKey;
}
exports.compressPublicKey = compressPublicKey;
/**
 * Derive shared key
 *
 * @returns shared key
 */
function derive(privateKeyA, publicKeyB) {
    return __awaiter(this, void 0, void 0, function () {
        var keyA, keyB, Px;
        return __generator(this, function (_a) {
            (0, util_1.assert)(privateKeyA.length === 32, 'Bad private key length, expected 32 got ' + privateKeyA.length);
            (0, util_1.assert)(publicKeyB.length === 65 || publicKeyB.length === 33, 'Bad public key length, expected either 33 or 65 got ' + publicKeyB.length);
            if (publicKeyB.length === 65)
                (0, util_1.assert)(publicKeyB[0] === 4, 'Bad public key prefix');
            if (publicKeyB.length === 33)
                (0, util_1.assert)(publicKeyB[0] === 2 || publicKeyB[0] === 3, 'Bad public key prefix');
            keyA = ec.keyFromPrivate(privateKeyA);
            keyB = ec.keyFromPublic(publicKeyB);
            Px = keyA.derive(keyB.getPublic()) // BN instance
            ;
            return [2 /*return*/, new Uint8Array(Px.toArray())];
        });
    });
}
exports.derive = derive;
/**
 * Asymmetric encrypt bytes
 *
 * @returns encrypted data
 */
function asymmetricEncrypt(publicKey, data) {
    return __awaiter(this, void 0, void 0, function () {
        var publicKeyTo, ephemPrivateKey, ephemPublicKey, px, hash, _a, iv, macKey, encryptionKey, ciphertext, _b, dataToMac, mac;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    publicKeyTo = (0, util_1.addPublicKeyPrefix)(publicKey);
                    ephemPrivateKey = generatePrivateKey();
                    ephemPublicKey = new Uint8Array(ec.keyFromPrivate(ephemPrivateKey).getPublic('array'));
                    return [4 /*yield*/, derive(ephemPrivateKey, publicKeyTo)];
                case 1:
                    px = _c.sent();
                    _a = Uint8Array.bind;
                    return [4 /*yield*/, crypto_1.crypto.subtle.digest('SHA-512', px)];
                case 2:
                    hash = new (_a.apply(Uint8Array, [void 0, _c.sent()]))();
                    iv = (0, randombytes_1.randomBytes)(16);
                    macKey = hash.slice(32);
                    return [4 /*yield*/, importAesCbcKey(hash.slice(0, 32))];
                case 3:
                    encryptionKey = _c.sent();
                    _b = Uint8Array.bind;
                    return [4 /*yield*/, crypto_1.crypto.subtle.encrypt({ name: 'AES-CBC', iv: iv }, encryptionKey, data)];
                case 4:
                    ciphertext = new (_b.apply(Uint8Array, [void 0, _c.sent()]))();
                    dataToMac = (0, bytes_1.concat)([iv, ephemPublicKey, ciphertext]);
                    return [4 /*yield*/, signHmac(macKey, dataToMac)];
                case 5:
                    mac = _c.sent();
                    return [2 /*return*/, {
                            version: 'secp256k1/asymmetric/v2',
                            nonce: iv,
                            ciphertext: ciphertext,
                            ephemPublicKey: ephemPublicKey,
                            mac: mac,
                        }];
            }
        });
    });
}
exports.asymmetricEncrypt = asymmetricEncrypt;
/**
 * Asymmetric decrypt bytes
 *
 * @returns decrypted bytes
 */
function asymmetricDecrypt(privateKey, data) {
    return __awaiter(this, void 0, void 0, function () {
        var version, ephemPublicKey, mac, nonce, ciphertext, px, hash, macKey, _a, _b, _c, dataToMac, valid, encryptionKey, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    version = data.version, ephemPublicKey = data.ephemPublicKey, mac = data.mac, nonce = data.nonce, ciphertext = data.ciphertext;
                    return [4 /*yield*/, derive(privateKey, ephemPublicKey)];
                case 1:
                    px = _e.sent();
                    _a = version;
                    switch (_a) {
                        case 'secp256k1/asymmetric/v2': return [3 /*break*/, 2];
                        case 'secp256k1/asymmetric': return [3 /*break*/, 4];
                    }
                    return [3 /*break*/, 6];
                case 2:
                    _b = Uint8Array.bind;
                    return [4 /*yield*/, crypto_1.crypto.subtle.digest('SHA-512', px)];
                case 3:
                    hash = new (_b.apply(Uint8Array, [void 0, _e.sent()]))();
                    macKey = hash.slice(32);
                    return [3 /*break*/, 6];
                case 4:
                    _c = Uint8Array.bind;
                    return [4 /*yield*/, crypto_1.crypto.subtle.digest('SHA-256', px)];
                case 5:
                    hash = new (_c.apply(Uint8Array, [void 0, _e.sent()]))();
                    macKey = new Uint8Array(32);
                    return [3 /*break*/, 6];
                case 6:
                    // This is not in `default` case so that we get a Typescript error
                    // if we add a new version.
                    if (!hash)
                        throw new Error('Unsupported version: ' + version);
                    dataToMac = (0, bytes_1.concat)([nonce, ephemPublicKey, ciphertext]);
                    return [4 /*yield*/, verifyHmac(macKey, mac, dataToMac)];
                case 7:
                    valid = _e.sent();
                    if (!valid) {
                        throw new Error('Bad MAC');
                    }
                    return [4 /*yield*/, importAesCbcKey(hash.slice(0, 32))];
                case 8:
                    encryptionKey = _e.sent();
                    _d = Uint8Array.bind;
                    return [4 /*yield*/, crypto_1.crypto.subtle.decrypt({ name: 'AES-CBC', iv: nonce }, encryptionKey, ciphertext)];
                case 9: return [2 /*return*/, new (_d.apply(Uint8Array, [void 0, _e.sent()]))()];
            }
        });
    });
}
exports.asymmetricDecrypt = asymmetricDecrypt;
/**
 * Sign bytes
 */
function sign(privateKey, d) {
    var signingKey = new signing_key_1.SigningKey(privateKey);
    var signature = signingKey.signDigest(d);
    var sig = (0, bytes_1.joinSignature)(signature);
    return sig;
}
exports.sign = sign;
function signHmac(key, data) {
    return __awaiter(this, void 0, void 0, function () {
        var hmacKey, sig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, importHmacKey(key)];
                case 1:
                    hmacKey = _a.sent();
                    return [4 /*yield*/, crypto_1.crypto.subtle.sign('HMAC', hmacKey, data)];
                case 2:
                    sig = _a.sent();
                    return [2 /*return*/, new Uint8Array(sig)];
            }
        });
    });
}
function verifyHmac(key, sig, data) {
    return __awaiter(this, void 0, void 0, function () {
        var hmacKey;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, importHmacKey(key)];
                case 1:
                    hmacKey = _a.sent();
                    return [2 /*return*/, crypto_1.crypto.subtle.verify('HMAC', hmacKey, sig, data)];
            }
        });
    });
}
function importHmacKey(key) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, crypto_1.crypto.subtle.importKey('raw', key, { name: 'HMAC', hash: 'SHA-256' }, true, ['sign', 'verify'])];
        });
    });
}
function importAesCbcKey(key) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, crypto_1.crypto.subtle.importKey('raw', key, { name: 'AES-CBC' }, false, ['encrypt', 'decrypt'])];
        });
    });
}
/**
 * Asymmetric encrypt string data as a given encoding (hex/base64). Defaults to base64.
 *
 * @returns encrypted data as hex
 */
function asymmetricEncryptToEncoding(publicKey, data, encoding) {
    if (encoding === void 0) { encoding = 'base64'; }
    return __awaiter(this, void 0, void 0, function () {
        var e;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, asymmetricEncrypt(publicKey, (0, util_1.decodeFromString)(data, 'utf8'))];
                case 1:
                    e = _a.sent();
                    return [2 /*return*/, (0, util_1.stringifyEncryptedData)(e, encoding)];
            }
        });
    });
}
exports.asymmetricEncryptToEncoding = asymmetricEncryptToEncoding;
/**
 * Asymmetric decrypt data from given encoding (hex/base64). Defaults to base64.
 *
 * @returns decrypted string
 */
function asymmetricDecryptFromEncoding(privateKey, hex, encoding) {
    if (encoding === void 0) { encoding = 'base64'; }
    return __awaiter(this, void 0, void 0, function () {
        var e, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    e = (0, util_1.parseEncrypedData)(hex, encoding);
                    return [4 /*yield*/, asymmetricDecrypt(privateKey, e)];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, (0, util_1.encodeToString)(res, 'utf8')];
            }
        });
    });
}
exports.asymmetricDecryptFromEncoding = asymmetricDecryptFromEncoding;
//# sourceMappingURL=secp256k1.js.map